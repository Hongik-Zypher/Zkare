const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

// Î™ÖÎ†πÏ§Ñ Ïù∏Ïûê ÌååÏã±
const args = process.argv.slice(2);
const deployOnlyVerifier = args.includes("--only-verifier");

async function main() {
  let zkare, groth16Verifier;
  let zkareAddress;

  if (deployOnlyVerifier) {
    // Í∏∞Ï°¥ Î∞∞Ìè¨Îêú Ïª®Ìä∏ÎûôÌä∏ Ï£ºÏÜå Í∞ÄÏ†∏Ïò§Í∏∞
    zkareAddress = process.env.ZKARE_CONTRACT_ADDRESS;
    
    if (!zkareAddress) {
      console.error("‚ùå ZKARE_CONTRACT_ADDRESSÍ∞Ä .env ÌååÏùºÏóê ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
      process.exit(1);
    }
    
    console.log(`‚úÖ Í∏∞Ï°¥ Zkare Ïª®Ìä∏ÎûôÌä∏ Ï£ºÏÜå ÏÇ¨Ïö©: ${zkareAddress}`);
  } else {
    // Î™®Îì† Ïª®Ìä∏ÎûôÌä∏ Î∞∞Ìè¨
    console.log("üöÄ Zkare Ïª®Ìä∏ÎûôÌä∏ Î∞∞Ìè¨ ÏãúÏûë...");
    
    // Zkare Ïª®Ìä∏ÎûôÌä∏ Î∞∞Ìè¨
    const Zkare = await ethers.getContractFactory("Zkare");
    zkare = await Zkare.deploy();
    await zkare.waitForDeployment();
    zkareAddress = zkare.target;
    console.log(`‚úÖ Zkare deployed to: ${zkareAddress}`);
  }

  // Groth16Verifier Ïª®Ìä∏ÎûôÌä∏ Î∞∞Ìè¨ (Ìï≠ÏÉÅ Ïã§Ìñâ)
  const Groth16Verifier = await ethers.getContractFactory("Groth16Verifier");
  groth16Verifier = await Groth16Verifier.deploy();
  await groth16Verifier.waitForDeployment();
  const groth16VerifierAddress = groth16Verifier.target;
  console.log(`‚úÖ Groth16Verifier deployed to: ${groth16VerifierAddress}`);

  // ZkareÏóê Groth16Verifier ÏÑ§Ï†ï
  if (!deployOnlyVerifier) {
    const setVerifierTx = await zkare.setVerifierContract(groth16VerifierAddress);
    await setVerifierTx.wait();
    console.log(`‚úÖ Groth16VerifierÍ∞Ä Zkare Ïª®Ìä∏ÎûôÌä∏Ïóê ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.`);
  }

  // .env ÌååÏùº ÏóÖÎç∞Ïù¥Ìä∏
  const envUpdates = {
    GROTH16_VERIFIER_ADDRESS: groth16VerifierAddress
  };
  
  // Ï†ÑÏ≤¥ Î∞∞Ìè¨Ïãú Î™®Îì† Ï£ºÏÜå ÏóÖÎç∞Ïù¥Ìä∏
  if (!deployOnlyVerifier) {
    envUpdates.ZKARE_CONTRACT_ADDRESS = zkareAddress;
  }
  
  updateEnv(envUpdates);
  
  // ÌîÑÎ°†Ìä∏ÏóîÎìúÎ•º ÏúÑÌïú Î∞∞Ìè¨ Ï†ïÎ≥¥ Ï†ÄÏû•
  saveDeploymentInfo({
    zkare: zkareAddress,
    groth16Verifier: groth16VerifierAddress
  });
  
  // ABI ÌååÏùºÏùÑ ÌîÑÎ°†Ìä∏ÏóîÎìú ÎîîÎ†âÌÜ†Î¶¨Ïóê Î≥µÏÇ¨
  await copyAbiToFrontend();
  
  console.log("\n‚úÖ Î∞∞Ìè¨ ÏôÑÎ£å!");
  console.log("üìù Î∞∞Ìè¨ Í≤∞Í≥º:");
  if (!deployOnlyVerifier) {
    console.log(`- Zkare: ${zkareAddress}`);
  }
  console.log(`- Groth16Verifier: ${groth16VerifierAddress}`);
}

function updateEnv(newEnv) {
  const envPath = path.resolve(__dirname, '../.env');
  let envContent = '';
  
  try {
    envContent = fs.readFileSync(envPath, 'utf8');
  } catch (err) {
    console.log('‚ùå .env ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§. ÏÉàÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§.');
  }

  Object.entries(newEnv).forEach(([key, value]) => {
    if (envContent.includes(`${key}=`)) {
      envContent = envContent.replace(
        new RegExp(`${key}=.*`), 
        `${key}=${value}`
      );
    } else {
      envContent += `\n${key}=${value}`;
    }
  });

  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ .env ÌååÏùºÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.');
}

function saveDeploymentInfo(contracts) {
  const deploymentsDir = path.resolve(__dirname, '../frontend/src/deployments');
  
  // ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir, { recursive: true });
  }
  
  const deploymentPath = path.join(deploymentsDir, 'latest.json');
  const deployment = {
    timestamp: new Date().toISOString(),
    network: process.env.HARDHAT_NETWORK || 'localhost',
    contracts: {
      zkare: { address: contracts.zkare },
      groth16Verifier: { address: contracts.groth16Verifier }
    }
  };
  
  fs.writeFileSync(deploymentPath, JSON.stringify(deployment, null, 2));
  console.log('‚úÖ Î∞∞Ìè¨ Ï†ïÎ≥¥Í∞Ä frontend/src/deployments/latest.jsonÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
}

/**
 * Ïª¥ÌååÏùºÎêú ABI ÌååÏùºÏùÑ ÌîÑÎ°†Ìä∏ÏóîÎìú ÎîîÎ†âÌÜ†Î¶¨Î°ú Î≥µÏÇ¨
 */
async function copyAbiToFrontend() {
  console.log("üìÇ ABI ÌååÏùºÏùÑ ÌîÑÎ°†Ìä∏ÏóîÎìúÎ°ú Î≥µÏÇ¨ Ï§ë...");
  
  const artifactsDir = path.resolve(__dirname, '../artifacts/contracts');
  const frontendAbiDir = path.resolve(__dirname, '../frontend/src/abis');
  
  // ÌîÑÎ°†Ìä∏ÏóîÎìú ABI ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
  if (!fs.existsSync(frontendAbiDir)) {
    fs.mkdirSync(frontendAbiDir, { recursive: true });
  }
  
  // Î≥µÏÇ¨Ìï† Ïª®Ìä∏ÎûôÌä∏ Î¶¨Ïä§Ìä∏
  const contractsToCopy = [
    { name: 'Zkare.sol/Zkare.json', destDir: 'Zkare.sol' },
    { name: 'Groth16Verifier.sol/Groth16Verifier.json', destDir: 'Groth16Verifier.sol' }
  ];
  
  for (const contract of contractsToCopy) {
    const srcPath = path.join(artifactsDir, contract.name);
    const destDir = path.join(frontendAbiDir, contract.destDir);
    const destFileName = path.basename(contract.name);
    
    // ÎåÄÏÉÅ ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
    if (!fs.existsSync(destDir)) {
      fs.mkdirSync(destDir, { recursive: true });
    }
    
    try {
      // ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
      if (fs.existsSync(srcPath)) {
        const artifactContents = fs.readFileSync(srcPath, 'utf8');
        fs.writeFileSync(path.join(destDir, destFileName), artifactContents);
        console.log(`‚úÖ ${contract.name} ABI ÌååÏùºÏù¥ Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.`);
      } else {
        console.warn(`‚ö†Ô∏è ${srcPath} ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.`);
      }
    } catch (error) {
      console.error(`‚ùå ${contract.name} Î≥µÏÇ¨ Ï§ë Ïò§Î•ò Î∞úÏÉù:`, error);
    }
  }
  
  console.log("‚úÖ Î™®Îì† ABI ÌååÏùºÏù¥ ÌîÑÎ°†Ìä∏ÏóîÎìú ÎîîÎ†âÌÜ†Î¶¨Ïóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.");
}

main().catch((error) => {
  console.error("‚ùå Error deploying contracts:", error);
  process.exitCode = 1;
});
